
Shell变量

一、定义变量
	a=4
	name="nihelili"
	for file in $(ls /etc)   #使用语句给变量赋值（file循环等于etc目录下的各		                                              个文件名）

	规则:
	* 变量名和等号之间不能有空格。
	* 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
	* 中间不能有空格，可以使用下划线（_）。
	* 不能使用标点符号。
	* 不能使用bash里的关键字（可用help命令查看保留关键字）。

二、使用变量
    要使用一个变量，在其前面加上美元符号（$）就可以取得其值。建议加{}

	echo ${a}
	echo ${name}

三、只读变量
	当一个变量不允许被修改时，需要将其设置为只读变量。

	#!/bin/bash
	string="nihelili"
    readonly string
	string="14"       (修改只读变量，会报错)

四、删除变量
    unset variable_name
	变量被删除后不能再次使用。unset 命令不能删除只读变量。

五、变量类型
    运行shell时，会同时存在三种变量：

	1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
	2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
	3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行

六、shell字符串
	1.单引号
		str='this is a string'
		单引号字符串的限制：
		* 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
		* 单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。
	
	2.双引号
	your_name='runoob'
	str="Hello, I know you are \"$your_name\"! \n"
	echo -e $str

	双引号的优点：
		* 双引号里可以有变量
		* 双引号里可以出现转义字符

	3.获取字符串长度
		string="abcd"
		echo ${#string} #输出 4

    4.提取子字符串
		以下实例从字符串第 2 个字符开始截取 4 个字符：
		string="runoob is a great site"
		echo ${string:1:4} # 输出 unoo
		注意：第一个字符的索引值为 0。

	5.查找字符串
 	    查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：
		string="runoob is a great site"
		echo `expr index "$string" io`  # 输出 4
		注意： 以上脚本中 ` 是反引号，而不是单引号 '，不要看错了哦。

七、Shell数组
	bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
	类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。

	1.定义数组
	  一般形式为：数组名=(值1 值2 值3 ... 值n)

	  如：array_name=(1 2 3 4)

	2.读取数组
	  读取数组元素值的一般格式是：
		$(数组名[下标])

	  如：value=${array_name[1]}
	      echo ${arrar_name[@]}    #取数组中所有的元素

	3.获取数组的长度
	  获取数组长度的方法与获取字符串长度的方法相同，例如：

	  # 取得数组元素的个数
	  length=${#array_name[@]}
	  # 或者
	  length=${#array_name[*]}
	  # 取得数组单个元素的长度
	  lengthn=${#array_name[n]}

八、Shell注释
	1.注释一行，以 # 开头的行就是注释，会被解释器忽略。
	2.注释多行
		:<<EOF
		...
		...
		...
		EOF

